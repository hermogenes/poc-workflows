name: Monorepo Validation

on:
  pull_request:
    branches: [ "main" ]

jobs:
  continuous-integration-monorepo:
    runs-on: ubuntu-latest
    outputs:
      affectedProjects: ${{ steps.affected-check.outputs.affectedProjects }}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: nrwl/nx-set-shas@177b48373c6dc583ce0d9257ffb484bdd232fedf
    - name: Use Node.js 16.x
      uses: actions/setup-node@v3
      with:
        node-version: 16.x
        cache: 'npm'
    - uses: actions/cache@v3
      id: modules-cache
      with:
        path: |
          **/node_modules
        key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}
    - name: Install Dependencies
      if: steps.modules-cache.outputs.cache-hit != 'true'
      run: npm ci
    - name: Linting
      run: npx nx affected --target=lint
    - name: Test
      run: npx nx affected --target=test
    - name: Export affected projects with build definition
      id: affected-check
      run: |
        echo "affectedProjects=$(npx nx print-affected --type=app --target=all --select=projectGraph.nodes | jq -c -R 'split(", ")')" >> $GITHUB_OUTPUT

  trigger-affected:
    runs-on: ubuntu-latest
    needs: ["continuous-integration-monorepo"]
    strategy:
      matrix:
        project: ${{ fromJSON(needs['continuous-integration-monorepo'].outputs.affectedProjects) }}
      fail-fast: false
    steps:
    - name: Trigger affected projects Pack
      uses: actions/github-script@v6
      with:
        script: |
          try {
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: `${{ matrix.project }}/ci.yml`,
              ref: context.ref
            });
          } catch {
          }
